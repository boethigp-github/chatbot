- name: Deploy Hudini Project
  hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /root/anaconda3/envs/hudini/bin/python
    anaconda_path: /root/anaconda3/bin
    project_path: /var/www/hudini
    conda_env_name: hudini
    python_version: "3.10"
    requirements_file: "{{ project_path }}/server/requirements.txt"
    database_name: hudini
    database_user: postgres
    database_password: postgres

  tasks:
    - name: Display selected Anaconda path and project settings
      debug:
        msg:
          - "Anaconda path: {{ anaconda_path }}"
          - "Project path: {{ project_path }}"
          - "Conda environment name: {{ conda_env_name }}"
          - "Python version: {{ python_version }}"

    - name: Ensure system dependencies are installed
      apt:
        name:
          - python3-dev
          - build-essential
        state: present
      register: system_dependencies
    - name: Log system dependencies installation
      debug:
        msg: "System dependencies installed: {{ system_dependencies.changes }}"

    - name: Ensure Anaconda is available
      stat:
        path: "{{ anaconda_path }}/conda"
      register: conda_check
    - name: Check Anaconda status
      debug:
        msg: "Anaconda exists: {{ conda_check.stat.exists }}"

    - name: Fail if Anaconda is not installed
      fail:
        msg: "Anaconda is not installed at {{ anaconda_path }}. Please install it before proceeding."
      when: not conda_check.stat.exists

    - name: Ensure Anaconda environment "{{ conda_env_name }}" exists
      shell: |
        source {{ anaconda_path }}/activate || true
        conda env list | grep -q {{ conda_env_name }} || conda create -n {{ conda_env_name }} python={{ python_version }} -y
      args:
        executable: /bin/bash
      register: conda_env_check
    - name: Log conda environment creation
      debug:
        msg: "Conda environment status: {{ conda_env_check.stdout }}"

    - name: Activate Conda environment and install dependencies
      shell: |
        source {{ anaconda_path }}/activate {{ conda_env_name }}
        pip install --upgrade pip
        pip install -r {{ requirements_file }}
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ anaconda_path }}:{{ ansible_env.PATH }}"
      register: pip_install_output
    - name: Log pip install output
      debug:
        msg: "{{ pip_install_output.stdout_lines | default('No output') }}"

    - name: Ensure PostgreSQL is installed
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: present
      register: postgresql_install
    - name: Log PostgreSQ
