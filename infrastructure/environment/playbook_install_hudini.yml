- name: Deploy Hudini Project
  hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /root/anaconda3/envs/hudini/bin/python
    anaconda_path: /root/anaconda3/bin
    project_path: /var/www/hudini
    conda_env_name: hudini
    python_version: "3.10"
    requirements_file: "{{ project_path }}/server/requirements.txt"
    database_name: hudini
    database_user: postgres
    database_password: postgress
    pg_hba_conf_path: /etc/postgresql/16/main/pg_hba.conf

  tasks:
    - name: Display selected Anaconda path and project settings
      debug:
        msg:
          - "Anaconda path: {{ anaconda_path }}"
          - "Project path: {{ project_path }}"
          - "Conda environment name: {{ conda_env_name }}"
          - "Python version: {{ python_version }}"

    - name: Ensure system dependencies are installed
      apt:
        name:
          - python3-dev
          - build-essential
        state: present
      register: system_dependencies

    - name: Log system dependencies installation
      debug:
        msg: "{{ system_dependencies }}"

    - name: Ensure Anaconda is available
      stat:
        path: "{{ anaconda_path }}/conda"
      register: conda_check

    - name: Check Anaconda status
      debug:
        msg: "Anaconda exists: {{ conda_check.stat.exists }}"

    - name: Fail if Anaconda is not installed
      fail:
        msg: "Anaconda is not installed at {{ anaconda_path }}. Please install it before proceeding."
      when: not conda_check.stat.exists

    - name: Ensure Anaconda environment "{{ conda_env_name }}" exists
      shell: |
        source {{ anaconda_path }}/activate || true
        conda env list | grep -q {{ conda_env_name }} || conda create -n {{ conda_env_name }} python={{ python_version }} -y
      args:
        executable: /bin/bash
      register: conda_env_check

    - name: Log conda environment creation
      debug:
        msg: "Conda environment status: {{ conda_env_check.stdout }}"

    - name: Activate Conda environment and install dependencies
      shell: |
        source {{ anaconda_path }}/activate {{ conda_env_name }}
        pip install --upgrade pip
        pip install -r {{ requirements_file }}
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ anaconda_path }}:{{ ansible_env.PATH }}"
      register: pip_install_output

    - name: Log pip install output
      debug:
        msg: "{{ pip_install_output.stdout_lines | default('No output') }}"

    - name: Ensure PostgreSQL is installed
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: present
      register: postgresql_install

    - name: Log PostgreSQL installation status
      debug:
        msg: "{{ postgresql_install }}"

    - name: Set PostgreSQL authentication to peer
      lineinfile:
        path: "{{ pg_hba_conf_path }}"
        regexp: '^local\s+all\s+postgres\s+.*$'
        line: 'local   all             postgres                                peer'
        backup: yes
      notify: Restart PostgreSQL

    - name: Restart PostgreSQL to apply peer authentication
      service:
        name: postgresql
        state: restarted

    - name: Set PostgreSQL user password
      become: yes
      become_user: postgres
      shell: |
        psql -c "ALTER USER postgres PASSWORD '{{ database_password }}';"
      args:
        executable: /bin/bash

    - name: Revert PostgreSQL authentication to md5
      lineinfile:
        path: "{{ pg_hba_conf_path }}"
        regexp: '^local\s+all\s+postgres\s+.*$'
        line: 'local   all             postgres                                md5'
        backup: yes
      notify: Restart PostgreSQL

    - name: Restart PostgreSQL to apply md5 authentication
      service:
        name: postgresql
        state: restarted

    - name: Test PostgreSQL login with password
      shell: |
        PGPASSWORD='{{ database_password }}' psql -U postgres -h localhost -c "\conninfo"
      register: login_test
      failed_when: "'Connected to' not in login_test.stdout"
      args:
        executable: /bin/bash

    - name: Log PostgreSQL login test result
      debug:
        msg: "PostgreSQL login test passed: {{ login_test.stdout }}"

    - name: Ensure PostgreSQL service is running
      service:
        name: postgresql
        state: started
        enabled: yes
      register: postgresql_service

    - name: Log PostgreSQL service status
      debug:
        msg: "{{ postgresql_service }}"

    - name: Create PostgreSQL database
      postgresql_db:
        name: "{{ database_name }}"
        encoding: UTF-8
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8
        state: present
      register: db_creation

    - name: Log database creation
      debug:
        msg: "{{ db_creation }}"

    - name: Create PostgreSQL user
      postgresql_user:
        name: "{{ database_user }}"
        password: "{{ database_password }}"
        privs: "ALL"
        state: present
      register: user_creation

    - name: Log user creation
      debug:
        msg: "{{ user_creation }}"

    - name: Ensure project directory ownership
      file:
        path: "{{ project_path }}"
        state: directory
        owner: www-data
        group: www-data
        recurse: yes
      register: ownership_changes

    - name: Log project directory ownership changes
      debug:
        msg: "{{ ownership_changes }}"

    - name: Ensure project directory permissions
      file:
        path: "{{ project_path }}"
        state: directory
        mode: "0755"
        recurse: yes
      register: permission_changes

    - name: Log project directory permission changes
      debug:
        msg: "{{ permission_changes }}"
