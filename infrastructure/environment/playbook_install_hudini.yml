- name: Deploy Hudini Project
  hosts: localhost
  become: yes
  vars:
    anaconda_path: /root/anaconda3/bin
    project_path: /var/www/hudini
    conda_env_name: hudini
    python_version: "3.10"
    requirements_file: "{{ project_path }}/server/requirements.txt"
    database_name: hudini
    database_user: postgres
    database_password: postgres

  tasks:
    - name: Ensure system dependencies are installed
      apt:
        name:
          - python3-dev
          - build-essential
        state: present

    - name: Ensure Anaconda is available
      stat:
        path: "{{ anaconda_path }}/conda"
      register: conda_check

    - name: Fail if Anaconda is not installed
      fail:
        msg: "Anaconda is not installed at {{ anaconda_path }}. Please install it before proceeding."
      when: not conda_check.stat.exists

    - name: Ensure Anaconda environment "{{ conda_env_name }}" exists
      shell: |
        source {{ anaconda_path }}/activate || true
        conda env list | grep -q {{ conda_env_name }} || conda create -n {{ conda_env_name }} python={{ python_version }} -y
      args:
        executable: /bin/bash

    - name: Activate Conda environment and install dependencies
      shell: |
        source {{ anaconda_path }}/activate {{ conda_env_name }}
        pip install --upgrade pip
        pip install -r {{ requirements_file }}
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ anaconda_path }}:{{ ansible_env.PATH }}"
      register: pip_install_output

    - name: Check pip install result
      debug:
        msg: "{{ pip_install_output.stdout_lines | default('No output') }}"

    - name: Ensure PostgreSQL is installed
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: present

    - name: Ensure PostgreSQL service is running
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Create PostgreSQL database
      postgresql_db:
        name: "{{ database_name }}"
        encoding: UTF-8
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8
        state: present

    - name: Create PostgreSQL user
      postgresql_user:
        name: "{{ database_user }}"
        password: "{{ database_password }}"
        privs: "ALL"
        state: present

    - name: Ensure project directory ownership
      file:
        path: "{{ project_path }}"
        state: directory
        owner: www-data
        group: www-data
        recurse: yes

    - name: Ensure project directory permissions
      file:
        path: "{{ project_path }}"
        state: directory
        mode: "0755"
        recurse: yes

    - name: Restart services (if needed)
      systemd:
        name: your-service-name
        state: restarted
      when: false  # Set to true and replace `your-service-name` if the project has a service to restart
